{"ast":null,"code":"import { usersAPI } from \"../api/Api\";\nconst followCase = 'FOLLOW-USER';\nconst unfollowCase = 'UNFOLLOW-USER';\nconst setUsersCase = 'SET-USERS';\nconst setCurrentPageCase = 'SET-CURRENT-PAGE';\nconst setTotalUsersCountCase = 'SET-TOTAL-USERS-COUNT';\nconst toggleIsFetchingCase = 'TOGGLE-IS-FETCHING';\nconst toggleIsFollowingProgressCase = 'TOGGLE-IS-FOLLOWING-PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: []\n};\n\nconst usersReducer = (state = initialState, action) => {\n  // debugger;\n  switch (action.type) {\n    case followCase:\n      return { ...state,\n        // users: state.users.map(u => u),\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case unfollowCase:\n      return { ...state,\n        // users: state.users.map(u => u),\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case setUsersCase:\n      return { ...state,\n        users: action.users\n      };\n\n    case setCurrentPageCase:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    case setTotalUsersCountCase:\n      return { ...state,\n        totalUsersCount: action.count\n      };\n\n    case toggleIsFetchingCase:\n      return { ...state,\n        isFetching: action.isFetching\n      };\n\n    case toggleIsFollowingProgressCase:\n      return { ...state,\n        // to have only ony request per click\n        followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id !== action.userId)\n      };\n\n    default:\n      return state;\n  }\n}; // Clean F to return actions\n\n\nexport const followSuccess = userId => ({\n  type: followCase,\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: unfollowCase,\n  userId\n});\nexport const setUsers = users => ({\n  type: setUsersCase,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: setCurrentPageCase,\n  currentPage\n});\nexport const setTotalUsersCount = totalUsersCount => ({\n  type: setTotalUsersCountCase,\n  count: totalUsersCount\n});\nexport const toggleIsFetching = isFetching => ({\n  type: toggleIsFetchingCase,\n  isFetching\n});\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n  type: toggleIsFollowingProgressCase,\n  isFetching,\n  userId\n}); //function to dispatch actions (Thunks)\n\nexport const requestUsers = (currentPage, pageSize) => {\n  return dispatch => {\n    dispatch(toggleIsFetching(true));\n    dispatch(setCurrentPage(currentPage));\n    usersAPI.getUsers(currentPage, pageSize).then(data => {\n      dispatch(toggleIsFetching(false)); // as per provided API\n\n      dispatch(setUsers(data.items));\n      dispatch(setTotalUsersCount(data.totalUsersCount));\n    });\n  };\n};\nexport const follow = userId => {\n  return dispatch => {\n    dispatch(toggleFollowingProgress(true, userId));\n    usersAPI.follow(userId).then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(followSuccess(userId));\n      }\n\n      dispatch(toggleFollowingProgress(false, userId));\n    });\n  };\n};\nexport const unfollow = userId => {\n  return dispatch => {\n    dispatch(toggleFollowingProgress(true, userId));\n    usersAPI.unfollow(userId).then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(unfollowSuccess(userId));\n      }\n\n      dispatch(toggleFollowingProgress(false, userId));\n    });\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["/Users/admin/way-of-samurai-alex/src/Redux/usersReducer.js"],"names":["usersAPI","followCase","unfollowCase","setUsersCase","setCurrentPageCase","setTotalUsersCountCase","toggleIsFetchingCase","toggleIsFollowingProgressCase","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","map","u","id","userId","followed","count","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleFollowingProgress","requestUsers","dispatch","getUsers","then","data","items","follow","response","resultCode","unfollow"],"mappings":"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","sourcesContent":["import {usersAPI} from \"../api/Api\";\n\nconst followCase = 'FOLLOW-USER';\nconst unfollowCase = 'UNFOLLOW-USER';\nconst setUsersCase = 'SET-USERS';\nconst setCurrentPageCase = 'SET-CURRENT-PAGE';\nconst setTotalUsersCountCase = 'SET-TOTAL-USERS-COUNT';\nconst toggleIsFetchingCase = 'TOGGLE-IS-FETCHING';\nconst toggleIsFollowingProgressCase = 'TOGGLE-IS-FOLLOWING-PROGRESS';\n\nlet initialState = {\n    users: [],\n    pageSize: 5,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [],\n};\n\nconst usersReducer = (state = initialState, action) => {\n\n    // debugger;\n    switch (action.type) {\n        case followCase:\n            return {\n                ...state,\n                // users: state.users.map(u => u),\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return {...u, followed: true}\n                    }\n                    return u;\n                })\n            }\n        case unfollowCase:\n            return {\n                ...state,\n                // users: state.users.map(u => u),\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return {...u, followed: false}\n                    }\n                    return u;\n                })\n            }\n        case setUsersCase:\n            return {\n                ...state,\n                users: action.users\n            }\n\n        case setCurrentPageCase:\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n\n        case setTotalUsersCountCase:\n            return {\n                ...state,\n                totalUsersCount: action.count\n            }\n        case toggleIsFetchingCase:\n            return {\n                ...state,\n                isFetching: action.isFetching\n            }\n        case toggleIsFollowingProgressCase:\n            return {\n                ...state,\n                // to have only ony request per click\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        default:\n            return state;\n    }\n}\n\n// Clean F to return actions\nexport const followSuccess = (userId) => ({type: followCase, userId});\nexport const unfollowSuccess = (userId) => ({type: unfollowCase, userId});\nexport const setUsers = (users) => ({type: setUsersCase, users});\nexport const setCurrentPage = (currentPage) => ({type: setCurrentPageCase, currentPage});\nexport const setTotalUsersCount = (totalUsersCount) => ({type: setTotalUsersCountCase, count: totalUsersCount});\nexport const toggleIsFetching = (isFetching) => ({type: toggleIsFetchingCase, isFetching})\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n    type: toggleIsFollowingProgressCase,\n    isFetching,\n    userId\n})\n\n//function to dispatch actions (Thunks)\n\nexport const requestUsers = (currentPage, pageSize) => {\n\n    return (dispatch) => {\n\n        dispatch(toggleIsFetching(true));\n        dispatch(setCurrentPage(currentPage));\n\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\n            dispatch(toggleIsFetching(false));\n            // as per provided API\n            dispatch(setUsers(data.items));\n            dispatch(setTotalUsersCount(data.totalUsersCount));\n        })\n    }\n}\n\nexport const follow = (userId) => {\n\n    return (dispatch) => {\n\n        dispatch(toggleFollowingProgress(true, userId));\n\n        usersAPI.follow(userId).then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(followSuccess(userId));\n            }\n            dispatch(toggleFollowingProgress(false, userId));\n        });\n    }\n}\n\nexport const unfollow = (userId) => {\n\n  return (dispatch) => {\n\n    dispatch(toggleFollowingProgress(true, userId));\n\n    usersAPI.unfollow(userId).then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(unfollowSuccess(userId));\n      }\n      dispatch(toggleFollowingProgress(false, userId));\n    });\n  }\n}\n\nexport default usersReducer;\n"]},"metadata":{},"sourceType":"module"}