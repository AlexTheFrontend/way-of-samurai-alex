{"ast":null,"code":"import { authAPI } from \"../api/Api\";\nimport { stopSubmit } from \"redux-form\";\nconst setUserDataCase = 'SET-USER-DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  // debugger;\n  switch (action.type) {\n    case setUserDataCase:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n}; // Clean F to return actions\n\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: setUserDataCase,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => dispatch => {\n  return authAPI.me().then(response => {\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = response.data.data;\n      dispatch(setAuthUserData(id, email, login, true));\n    }\n  });\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  return authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    } else {\n      const serverMessage = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n      dispatch(stopSubmit(\"login\", {\n        _error: serverMessage\n      }));\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  return authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData(null, null, null, false));\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/admin/way-of-samurai-alex/src/Redux/authReducer.js"],"names":["authAPI","stopSubmit","setUserDataCase","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","me","then","response","data","resultCode","id","password","rememberMe","serverMessage","messages","length","_error","logout"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,MAAMC,eAAe,GAAG,eAAxB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAElD;AACA,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,eAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAIJ;AACI,aAAOH,KAAP;AAPR;AASH,CAZD,C,CAcA;;;AACA,OAAO,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,MAAmC;AAC9DI,EAAAA,IAAI,EAAET,eADwD;AAE9DU,EAAAA,OAAO,EAAE;AAACR,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB;AAFqD,CAAnC,CAAxB;AAKP,OAAO,MAAMO,eAAe,GAAG,MAAOC,QAAD,IAAc;AAC/C,SAAOf,OAAO,CAACgB,EAAR,GACFC,IADE,CACGC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChC,UAAI;AAACC,QAAAA,EAAD;AAAKhB,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAqBY,QAAQ,CAACC,IAAT,CAAcA,IAAvC;AACAJ,MAAAA,QAAQ,CAACF,eAAe,CAACQ,EAAD,EAAKhB,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,GANE,CAAP;AAOH,CARM;AAUP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQiB,QAAR,EAAkBC,UAAlB,KAAkCR,QAAD,IAAc;AAEhE,SAAOf,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBiB,QAArB,EAA+BC,UAA/B,EACFN,IADE,CACGC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCL,MAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH,KAFD,MAEO;AACH,YAAMU,aAAa,GAAGN,QAAQ,CAACC,IAAT,CAAcM,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCR,QAAQ,CAACC,IAAT,CAAcM,QAAd,CAAuB,CAAvB,CAApC,GAAgE,YAAtF;AACAV,MAAAA,QAAQ,CAACd,UAAU,CAAC,OAAD,EAAU;AAAC0B,QAAAA,MAAM,EAAEH;AAAT,OAAV,CAAX,CAAR;AACH;AACJ,GARE,CAAP;AASH,CAXM;AAaP,OAAO,MAAMI,MAAM,GAAG,MAAOb,QAAD,IAAc;AACtC,SAAOf,OAAO,CAAC4B,MAAR,GACFX,IADE,CACGC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCL,MAAAA,QAAQ,CAACD,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,GALE,CAAP;AAMH,CAPM;AASP,eAAeN,WAAf","sourcesContent":["import {authAPI} from \"../api/Api\";\nimport {stopSubmit} from \"redux-form\";\n\nconst setUserDataCase = 'SET-USER-DATA';\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false,\n};\n\nconst authReducer = (state = initialState, action) => {\n\n    // debugger;\n    switch (action.type) {\n        case setUserDataCase:\n            return {\n                ...state,\n                ...action.payload,\n            }\n        default:\n            return state;\n    }\n}\n\n// Clean F to return actions\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n    type: setUserDataCase,\n    payload: {userId, email, login, isAuth}\n});\n\nexport const getAuthUserData = () => (dispatch) => {\n    return authAPI.me()\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                let {id, email, login} = response.data.data;\n                dispatch(setAuthUserData(id, email, login, true));\n            }\n        })\n}\n\nexport const login = (email, password, rememberMe) => (dispatch) => {\n\n    return authAPI.login(email, password, rememberMe)\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(getAuthUserData())\n            } else {\n                const serverMessage = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\n                dispatch(stopSubmit(\"login\", {_error: serverMessage}))\n            }\n        })\n}\n\nexport const logout = () => (dispatch) => {\n    return authAPI.logout()\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(getAuthUserData(null, null, null, false))\n            }\n        })\n}\n\nexport default authReducer;\n"]},"metadata":{},"sourceType":"module"}