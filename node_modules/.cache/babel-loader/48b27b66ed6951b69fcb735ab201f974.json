{"ast":null,"code":"import { getAuthUserData } from \"./authReducer\";\nconst setInitialisedCase = 'SET-INITIALISED';\nlet initialState = {\n  initialised: false\n};\n\nconst appReducer = (state = initialState, action) => {\n  // debugger;\n  switch (action.type) {\n    case initialState:\n      return { ...state,\n        initialised: true\n      };\n\n    default:\n      return state;\n  }\n}; // Clean F to return actions\n\n\nexport const setInitialisedSuccess = () => ({\n  type: setInitialisedCase\n});\nexport const initialiseApp = () => dispatch => {\n  let promise = dispatch(getAuthUserData()); //dispatch(smtElse());\n  //dispatch(smtElse());\n  // promise.then(() => {\n  //     dispatch(setInitialisedSuccess());\n  // })\n\n  Promise.all([promise]).then(() => {\n    dispatch(setInitialisedSuccess());\n  });\n};\nexport default appReducer;","map":{"version":3,"sources":["/Users/admin/way-of-samurai-alex/src/Redux/appReducer.js"],"names":["getAuthUserData","setInitialisedCase","initialState","initialised","appReducer","state","action","type","setInitialisedSuccess","initialiseApp","dispatch","promise","Promise","all","then"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,eAA9B;AAEA,MAAMC,kBAAkB,GAAG,iBAA3B;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,WAAW,EAAE;AADE,CAAnB;;AAIA,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAEjD;AACA,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKL,YAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHF,QAAAA,WAAW,EAAE;AAFV,OAAP;;AAIJ;AACI,aAAOE,KAAP;AAPR;AASH,CAZD,C,CAcA;;;AACA,OAAO,MAAMG,qBAAqB,GAAG,OAAO;AAACD,EAAAA,IAAI,EAAEN;AAAP,CAAP,CAA9B;AAEP,OAAO,MAAMQ,aAAa,GAAG,MAAOC,QAAD,IAAc;AAC7C,MAAIC,OAAO,GAAGD,QAAQ,CAACV,eAAe,EAAhB,CAAtB,CAD6C,CAE7C;AACA;AACA;AACA;AACA;;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAa,CAACF,OAAD,CAAb,EACKG,IADL,CACU,MAAM;AACRJ,IAAAA,QAAQ,CAACF,qBAAqB,EAAtB,CAAR;AACH,GAHL;AAKH,CAZM;AAeP,eAAeJ,UAAf","sourcesContent":["import {getAuthUserData} from \"./authReducer\";\n\nconst setInitialisedCase = 'SET-INITIALISED';\n\nlet initialState = {\n    initialised: false,\n};\n\nconst appReducer = (state = initialState, action) => {\n\n    // debugger;\n    switch (action.type) {\n        case initialState:\n            return {\n                ...state,\n                initialised: true,\n            }\n        default:\n            return state;\n    }\n}\n\n// Clean F to return actions\nexport const setInitialisedSuccess = () => ({type: setInitialisedCase});\n\nexport const initialiseApp = () => (dispatch) => {\n    let promise = dispatch(getAuthUserData());\n    //dispatch(smtElse());\n    //dispatch(smtElse());\n    // promise.then(() => {\n    //     dispatch(setInitialisedSuccess());\n    // })\n    Promise.all ([promise])\n        .then(() => {\n            dispatch(setInitialisedSuccess());\n        })\n\n}\n\n\nexport default appReducer;\n"]},"metadata":{},"sourceType":"module"}