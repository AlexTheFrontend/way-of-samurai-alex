{"ast":null,"code":"import { sendMessageCreator } from \"../../Redux/dialogsReducer\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../HOC/withAuthRedirect\";\nimport { compose } from \"redux\";\n\nlet mapStateToProps = state => {\n  return {\n    // Data from state (which is Store before)\n    messagesPage: state.messagesPage\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    //  callback F\n    sendMessage: newMessageBody => dispatch(sendMessageCreator(newMessageBody))\n  };\n}; // compose(\n//     connect(mapStateToProps, mapDispatchToProps),\n//     withAuthRedirect\n// )(Dialogs)\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\n//\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\n\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);","map":{"version":3,"sources":["/Users/admin/way-of-samurai-alex/src/Components/Dialogs/DialogsContainer.js"],"names":["sendMessageCreator","Dialogs","connect","withAuthRedirect","compose","mapStateToProps","state","messagesPage","mapDispatchToProps","dispatch","sendMessage","newMessageBody"],"mappings":"AAAA,SAAQA,kBAAR,QAAiC,4BAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,gBAAR,QAA+B,4BAA/B;AACA,SAAQC,OAAR,QAAsB,OAAtB;;AAEA,IAAIC,eAAe,GAAIC,KAAD,IAAW;AAC7B,SAAO;AACH;AACAC,IAAAA,YAAY,EAAED,KAAK,CAACC;AAFjB,GAAP;AAIH,CALD;;AAOA,IAAIC,kBAAkB,GAAIC,QAAD,IAAc;AACnC,SAAO;AACH;AACAC,IAAAA,WAAW,EAAGC,cAAD,IAAoBF,QAAQ,CAACT,kBAAkB,CAACW,cAAD,CAAnB;AAFtC,GAAP;AAIH,CALD,C,CAOA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,eAAeP,OAAO,CAClBF,OAAO,CAACG,eAAD,EAAkBG,kBAAlB,CADW,EAElBL,gBAFkB,CAAP,CAGbF,OAHa,CAAf","sourcesContent":["import {sendMessageCreator} from \"../../Redux/dialogsReducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nlet mapStateToProps = (state) => {\n    return {\n        // Data from state (which is Store before)\n        messagesPage: state.messagesPage,\n    };\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        //  callback F\n        sendMessage: (newMessageBody) => dispatch(sendMessageCreator(newMessageBody)),\n    };\n}\n\n// compose(\n//     connect(mapStateToProps, mapDispatchToProps),\n//     withAuthRedirect\n// )(Dialogs)\n\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\n//\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);\n\n"]},"metadata":{},"sourceType":"module"}